package com.leetcode.dynamicprogramming;
//A message containing letters from A-Z can be encoded into numbers using the following mapping:
        /*'A' -> "1"
        'B' -> "2"
        ...
        'Z' -> "26"*/

//To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways).
// For example, "11106" can be mapped into:
        /*"AAJF" with the grouping (1 1 10 6)
        "KJF" with the grouping (11 10 6)*/
//Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

//Given a string s containing only digits, return the number of ways to decode it.
//The test cases are generated so that the answer fits in a 32-bit integer.

public class DecodeWays {

    public static void main(String[] args) {
        input1();
    }

    static int numDecoding(String str){
        if (str == null || str.length() == 0) {
            return 0;
        }
        int n = str.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = str.charAt(0) != '0' ? 1 : 0;
        for (int i = 2; i <= n; i++) {
            int first = Integer.valueOf(str.substring(i - 1, i));
            int second = Integer.valueOf(str.substring(i - 2, i));
            if (first >= 1 && first <= 9) {
                dp[i] += dp[i-1];
            }
            if (second >= 10 && second <= 26) {
                dp[i] += dp[i-2];
            }
        }
        return dp[n];
    }

    public int numDecodings1(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        char[] chars = s.toCharArray();
        int[] dp = new int[chars.length];
        dp[0] = chars[0] == '0' ? 0 : 1;
        for (int i = 1; i < chars.length; i++) {
            char current = chars[i];
            char prev = chars[i - 1];
            if (current >= '1' && current <= '9') {
                dp[i] = dp[i - 1];
            }
            if ((prev == '1' && current >= '0' && current <= '9') ||
                    (prev == '2' && current >= '0' && current <= '6')) {
                dp[i] += i >= 2 ? dp[i - 2] : 1;
            }
        }
        return dp[chars.length - 1];
    }

    static int numDecodingByRecursionUpgrad(String str){
        return numDecodingByRecursionUpgrad(0, str);
    }

    static int numDecodingByRecursionUpgrad(int i, String str){
        if(i == str.length())
            return 1;
        if(str.charAt(i) == '0')
            return 0;

        int count = numDecodingByRecursionUpgrad(i+1, str);

        if(i+1 < str.length() && (str.charAt(i) == '1' || (str.charAt(i) == '2' &&
                str.charAt(i+1) <= '6'))){
            count = count + numDecodingByRecursionUpgrad(i+2, str);
        }

        return count;
    }

    static void input1(){
        String str ="12";
        System.out.println("input1 numDecodingByRecursionUpgrad " + numDecodingByRecursionUpgrad(str));
    }
}
