package com.leetcode.zothers;

//Write an algorithm to determine if a number n is happy.
/*A happy number is a number defined by the following process:
        1. Starting with any positive integer, replace the number by the sum of the squares of its digits.
        2. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
        3. Those numbers for which this process ends in 1 are happy.

Return true if n is a happy number, and false if not.*/

/*Example 1:
        Input: n = 19
        Output: true
        Explanation:
        1^2 + 9^2 = 82
        8^2 + 2^2 = 68
        6^2 + 8^2 = 100
        1^2 + 0^2 + 0^2 = 1

Example 2:
        Input: n = 2
        Output: false*/
import java.util.HashSet;

public class HappyNumber {

    public static void main(String[] args) {

        int n =0;
        n =19;
        System.out.println("isHappy " + isHappy(n));
    }

    static boolean isHappy(int n){
        HashSet<Integer> set = new HashSet<Integer>();

        while(!set.contains(n)){
            set.add(n);
            n = getSum(n);
            if(n==1)
                return true;
        }
        return false;
    }

    static boolean isHappy1(int n){
        HashSet<Integer> set = new HashSet<Integer>();

        while(n !=1){
           if(set.contains(n))
               return false;
           set.add(n);

           n = getSum(n);
        }
        return true;
    }

    public static int getSum(int n){
        int sum =0;
        System.out.println("getSum n " + n);
        while(n>0){
            int digit = n%10;
            sum+=digit*digit;
            n=n/10;
            System.out.println("getSum digit:" + digit + " sum:" + sum +" n:"+ n);
        }
        return sum;
    }
}
