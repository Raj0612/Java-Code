package com.bitwiseoperators;

import java.util.HashSet;
import java.util.Iterator;

//Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
// You must implement a solution with a linear runtime complexity and use only constant extra space.

/*
Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1
 */
public class SingleNumber {
    public static void main(String[] args) {
       // int array[] ={4,1,2,1,2};
        int array[] ={2,1, 1, 4,2};
        //1^1^2^2^4
       // System.out.println("Single Num in Array by Bitwise: " + singleNumberByBitwise(array));
       // System.out.println("Single Num in Array by HashSet: " + singleNumberByHashSet(array));
        System.out.println("Single Num in Array without Bitwise: " + singleNumberWithoutBitwise(array));
    }


    //a^a = 0
    //a^0 =a
    public static int singleNumberByBitwise(int[] nums) {
        int res = 0;
        for (int x : nums) {
            System.out.print(res + "^" +x + ": ");
            res ^= x;
            System.out.println(res);
        }
        return res;
    }

    public static int singleNumberByHashSet(int[] nums) {
        HashSet<Integer> set = new HashSet<Integer>();
        for (int x : nums) {
            if (!set.add(x))
                set.remove(x);
        }
        System.out.println("Set " + set);
        Iterator<Integer> it = set.iterator();
        return it.next();
    }

    public static int singleNumberWithoutBitwise(int[] nums) {
        boolean flag = false;

        for(int i=0; i<nums.length; i++){
            flag = false;
            for(int j=0; j<i; j++){//left
                if(nums[i]==nums[j]){
                    flag = true;
                    break;
                }
            }
            if(flag == false){
                for(int j= i+1;j<nums.length; j++){//right
                    if(nums[i] == nums[j]){
                        flag = true;
                        break;
                    }
                }
            }
            if(flag == false){
                return nums[i];
            }
        }
        return 0;
    }
}
