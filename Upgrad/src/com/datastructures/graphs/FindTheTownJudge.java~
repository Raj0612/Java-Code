package com.datastructures.graphs;

import java.util.Arrays;

//In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.
//If the town judge exists, then:
/*
1) The town judge trusts nobody.
2) Everybody (except for the town judge) trusts the town judge.
3) There is exactly one person that satisfies properties 1 and 2.
 */
//You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.
// If a trust relationship does not exist in trust array, then such a trust relationship does not exist.
//Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.
/*
Example 1:
Input: n = 3, trust = [[1,3],[2,3]]
Output: 3

Example 2:
Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1

Example 3:
Input: n = 2, trust = [[1,2]]
Output: 2

Example 4:
Input: n = 3, trust = [[1,3],[2,3],[3,3]]
Output: -1
 */
public class FindTheTownJudge {
    public static void main(String args[]) {
        input1();
        System.out.println();
        input2();
        System.out.println();
        input3();
        System.out.println();
        input4();
    }

    public static int findJudge(int n, int[][] trust) {
        System.out.println("findJudge " + Arrays.deepToString(trust) + " n " + n);
        int[] netTrustGains = new int[n + 1];
        System.out.println("findJudge netTrustGains: " + netTrustGains.length);
        for (int[] i : trust) {
            netTrustGains[i[0]]--;
            netTrustGains[i[1]]++;
        }

        System.out.println("findJudge: " + Arrays.toString(netTrustGains));
        int judge = -1;
        for (int i = 1; i <= n; i++) {
            if (netTrustGains[i] == n-1) {
                judge = i;
            }
        }
        return judge;
    }


    static void input1(){
        int n = 3;
        int[][] trust = {{1, 3}, {2, 3}};
        System.out.println("input1 " + findJudge(n, trust));
    }

    static void input2(){
        int n = 3;
        int[][] trust = {{1, 3}, {2, 3},{3, 1}};
        System.out.println("input2 " + findJudge(n, trust));
    }

    static void input3(){
        int n = 4;
        int[][] trust = {{1, 3}, {2, 3},{4, 3}};
        System.out.println("input3 " + findJudge(n, trust));
    }

    static void input4(){
        int n = 3;
        int[][] trust = {{1, 3}, {2, 3},{3, 3}};
        System.out.println("input4 " + findJudge(n, trust));
    }
}


